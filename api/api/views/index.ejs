<head>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<link rel="stylesheet" href="https://unpkg.com/plyr@3/dist/plyr.css" />
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
/>
<script
  src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"
  type="text/javascript"
></script>
<script src="https://unpkg.com/plyr@3.7.2/dist/plyr.min.js"></script>

<div
  id="video"
  class="player iframe video-js vjs-default-skin vjs-skin-flat-grey vjs-big-play-centered vjs-16-9 vidstreaming_iframe"
>
  <script src="https://cdn.jsdelivr.net/hls.js/latest/hls.js"></script>
  <h1>Playing Episode - <%- episode %></h1>
  <video preload="none" id="player" autoplay controls crossorigin></video>
  <script>
    var video = document.querySelector("#player");
    if (Hls.isSupported()) {
      var hls = new Hls();
      hls.loadSource("<%- result.sources %>");
      hls.attachMedia(video);
      hls.on(Hls.Events.MANIFEST_PARSED, function () {
        video.play();
      });
    }

    hls.on(Hls.Events.ERROR, function (event, data) {
      console.log(data);
      console.log(event);
    });

    hls.on(Hls.Events.MANIFEST_PARSED, () => {
      player = loadPlayer();
    });
    function updateQuality(newQuality) {
      hls.levels.forEach((level, levelIndex) => {
        if (level.height === newQuality) {
          console.log("Found quality match with " + newQuality);
          hls.currentLevel = levelIndex;
        }
      });
    }

    function loadPlayer() {
      // If HLS is supported (ie non-mobile), we add video quality settings

      let defaultOptions = {};

      const availableQualities = hls.levels.map((l) => l.height);

      // Add new qualities to option
      defaultOptions.quality = {
        default: availableQualities[1],
        options: availableQualities,
        // this ensures Plyr to use Hls to update quality level
        forced: true,
        onChange: (e) => updateQuality(e),
      };

      // Initialize here

      const player = new Plyr("#player", defaultOptions);
      player.on("enterfullscreen", (event) => {
        screen.orientation.lock("landscape");
      });
      player.on("exitfullscreen", (event) => {
        screen.orientation.lock("portrait");
      });

      // Start HLS load on play event

      // Handle HLS quality changes
      let inx = " <%- next %>";
      let prev = "<%- prev %>";

      if (prev.includes("https://animexninja-api.dhvitop1.repl.co")) {
        $(
          `<button type="button" onclick="location.href = '<%- prev %>'" class="plyr-prev"><i class="fa fa-step-backward fa-lg"></i></button>`
        ).insertBefore('.plyr__controls [data-plyr="play"]');
      }
      if (inx.includes("https://animexninja-api.dhvitop1.repl.co")) {
        $(
          `<button type="button" onclick="location.href = '<%- next %>'" class="plyr-next"><i  class="fa fa-step-forward fa-lg"></i></button>`
        ).insertAfter('.plyr__controls [data-plyr="play"]');
      }

      return player;
    }
  </script>
</div>
<style>
  .plyr-prev {
    margin-right: 0 !important;
    position: relative;
    display: inline-block;
    -ms-flex-negative: 0;
    flex-shrink: 0;
    overflow: visible;
    vertical-align: middle;
    padding: 7px;
    border: 0;
    background: 0 0;
    border-radius: 3px;
    cursor: pointer;
    transition: background 0.3s ease, color 0.3s ease, opacity 0.3s ease;
    color: inherit;
  }
  .plyr-next {
    margin-left: 0 !important;
    position: relative;
    display: inline-block;
    -ms-flex-negative: 0;
    flex-shrink: 0;
    overflow: visible;
    vertical-align: middle;
    padding: 7px;
    border: 0;
    background: 0 0;
    border-radius: 3px;
    cursor: pointer;
    transition: background 0.3s ease, color 0.3s ease, opacity 0.3s ease;
    color: inherit;
  }
  .plyr__controls [data-plyr="play"] {
    margin-left: 0 !important;
  }
</style>
